#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClimbingProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ClimbingDatabase")]
	public partial class ClimbingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClimber(Climber instance);
    partial void UpdateClimber(Climber instance);
    partial void DeleteClimber(Climber instance);
    partial void InsertGrade(Grade instance);
    partial void UpdateGrade(Grade instance);
    partial void DeleteGrade(Grade instance);
    partial void InsertLocationTable(LocationTable instance);
    partial void UpdateLocationTable(LocationTable instance);
    partial void DeleteLocationTable(LocationTable instance);
    partial void InsertNetUser(NetUser instance);
    partial void UpdateNetUser(NetUser instance);
    partial void DeleteNetUser(NetUser instance);
    partial void InsertTable(Table instance);
    partial void UpdateTable(Table instance);
    partial void DeleteTable(Table instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertSend(Send instance);
    partial void UpdateSend(Send instance);
    partial void DeleteSend(Send instance);
    #endregion
		
		public ClimbingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClimbingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClimbingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClimbingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Climber> Climbers
		{
			get
			{
				return this.GetTable<Climber>();
			}
		}
		
		public System.Data.Linq.Table<Grade> Grades
		{
			get
			{
				return this.GetTable<Grade>();
			}
		}
		
		public System.Data.Linq.Table<LocationTable> LocationTables
		{
			get
			{
				return this.GetTable<LocationTable>();
			}
		}
		
		public System.Data.Linq.Table<NetUser> NetUsers
		{
			get
			{
				return this.GetTable<NetUser>();
			}
		}
		
		public System.Data.Linq.Table<Table> Tables
		{
			get
			{
				return this.GetTable<Table>();
			}
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<Send> Sends
		{
			get
			{
				return this.GetTable<Send>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Climber")]
	public partial class Climber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClimberID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private EntitySet<NetUser> _NetUsers;
		
		private EntitySet<Table> _Tables;
		
		private EntitySet<Send> _Sends;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClimberIDChanging(int value);
    partial void OnClimberIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public Climber()
		{
			this._NetUsers = new EntitySet<NetUser>(new Action<NetUser>(this.attach_NetUsers), new Action<NetUser>(this.detach_NetUsers));
			this._Tables = new EntitySet<Table>(new Action<Table>(this.attach_Tables), new Action<Table>(this.detach_Tables));
			this._Sends = new EntitySet<Send>(new Action<Send>(this.attach_Sends), new Action<Send>(this.detach_Sends));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClimberID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClimberID
		{
			get
			{
				return this._ClimberID;
			}
			set
			{
				if ((this._ClimberID != value))
				{
					this.OnClimberIDChanging(value);
					this.SendPropertyChanging();
					this._ClimberID = value;
					this.SendPropertyChanged("ClimberID");
					this.OnClimberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Climber_NetUser", Storage="_NetUsers", ThisKey="ClimberID", OtherKey="ClimberID")]
		public EntitySet<NetUser> NetUsers
		{
			get
			{
				return this._NetUsers;
			}
			set
			{
				this._NetUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Climber_Table", Storage="_Tables", ThisKey="ClimberID", OtherKey="ClimberID")]
		public EntitySet<Table> Tables
		{
			get
			{
				return this._Tables;
			}
			set
			{
				this._Tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Climber_Send", Storage="_Sends", ThisKey="ClimberID", OtherKey="ClimberID")]
		public EntitySet<Send> Sends
		{
			get
			{
				return this._Sends;
			}
			set
			{
				this._Sends.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NetUsers(NetUser entity)
		{
			this.SendPropertyChanging();
			entity.Climber = this;
		}
		
		private void detach_NetUsers(NetUser entity)
		{
			this.SendPropertyChanging();
			entity.Climber = null;
		}
		
		private void attach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.Climber = this;
		}
		
		private void detach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.Climber = null;
		}
		
		private void attach_Sends(Send entity)
		{
			this.SendPropertyChanging();
			entity.Climber = this;
		}
		
		private void detach_Sends(Send entity)
		{
			this.SendPropertyChanging();
			entity.Climber = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grades")]
	public partial class Grade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GradeID;
		
		private string _GradeDescription;
		
		private EntitySet<Route> _Routes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGradeIDChanging(int value);
    partial void OnGradeIDChanged();
    partial void OnGradeDescriptionChanging(string value);
    partial void OnGradeDescriptionChanged();
    #endregion
		
		public Grade()
		{
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeDescription", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GradeDescription
		{
			get
			{
				return this._GradeDescription;
			}
			set
			{
				if ((this._GradeDescription != value))
				{
					this.OnGradeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GradeDescription = value;
					this.SendPropertyChanged("GradeDescription");
					this.OnGradeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Route", Storage="_Routes", ThisKey="GradeID", OtherKey="GradeID")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Grade = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Grade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationTable")]
	public partial class LocationTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private string _StateName;
		
		private string _City;
		
		private string _Description;
		
		private EntitySet<Route> _Routes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public LocationTable()
		{
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationTable_Route", Storage="_Routes", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.LocationTable = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.LocationTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NetUser")]
	public partial class NetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _PasswordValue;
		
		private int _ClimberID;
		
		private EntityRef<Climber> _Climber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordValueChanging(string value);
    partial void OnPasswordValueChanged();
    partial void OnClimberIDChanging(int value);
    partial void OnClimberIDChanged();
    #endregion
		
		public NetUser()
		{
			this._Climber = default(EntityRef<Climber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordValue", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PasswordValue
		{
			get
			{
				return this._PasswordValue;
			}
			set
			{
				if ((this._PasswordValue != value))
				{
					this.OnPasswordValueChanging(value);
					this.SendPropertyChanging();
					this._PasswordValue = value;
					this.SendPropertyChanged("PasswordValue");
					this.OnPasswordValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClimberID", DbType="Int NOT NULL")]
		public int ClimberID
		{
			get
			{
				return this._ClimberID;
			}
			set
			{
				if ((this._ClimberID != value))
				{
					if (this._Climber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClimberIDChanging(value);
					this.SendPropertyChanging();
					this._ClimberID = value;
					this.SendPropertyChanged("ClimberID");
					this.OnClimberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Climber_NetUser", Storage="_Climber", ThisKey="ClimberID", OtherKey="ClimberID", IsForeignKey=true)]
		public Climber Climber
		{
			get
			{
				return this._Climber.Entity;
			}
			set
			{
				Climber previousValue = this._Climber.Entity;
				if (((previousValue != value) 
							|| (this._Climber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Climber.Entity = null;
						previousValue.NetUsers.Remove(this);
					}
					this._Climber.Entity = value;
					if ((value != null))
					{
						value.NetUsers.Add(this);
						this._ClimberID = value.ClimberID;
					}
					else
					{
						this._ClimberID = default(int);
					}
					this.SendPropertyChanged("Climber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Table]")]
	public partial class Table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _PasswordValue;
		
		private int _ClimberID;
		
		private EntityRef<Climber> _Climber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordValueChanging(string value);
    partial void OnPasswordValueChanged();
    partial void OnClimberIDChanging(int value);
    partial void OnClimberIDChanged();
    #endregion
		
		public Table()
		{
			this._Climber = default(EntityRef<Climber>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordValue", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PasswordValue
		{
			get
			{
				return this._PasswordValue;
			}
			set
			{
				if ((this._PasswordValue != value))
				{
					this.OnPasswordValueChanging(value);
					this.SendPropertyChanging();
					this._PasswordValue = value;
					this.SendPropertyChanged("PasswordValue");
					this.OnPasswordValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClimberID", DbType="Int NOT NULL")]
		public int ClimberID
		{
			get
			{
				return this._ClimberID;
			}
			set
			{
				if ((this._ClimberID != value))
				{
					if (this._Climber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClimberIDChanging(value);
					this.SendPropertyChanging();
					this._ClimberID = value;
					this.SendPropertyChanged("ClimberID");
					this.OnClimberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Climber_Table", Storage="_Climber", ThisKey="ClimberID", OtherKey="ClimberID", IsForeignKey=true)]
		public Climber Climber
		{
			get
			{
				return this._Climber.Entity;
			}
			set
			{
				Climber previousValue = this._Climber.Entity;
				if (((previousValue != value) 
							|| (this._Climber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Climber.Entity = null;
						previousValue.Tables.Remove(this);
					}
					this._Climber.Entity = value;
					if ((value != null))
					{
						value.Tables.Add(this);
						this._ClimberID = value.ClimberID;
					}
					else
					{
						this._ClimberID = default(int);
					}
					this.SendPropertyChanged("Climber");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Route")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RouteID;
		
		private int _LocationID;
		
		private int _GradeID;
		
		private EntitySet<Send> _Sends;
		
		private EntityRef<Grade> _Grade;
		
		private EntityRef<LocationTable> _LocationTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRouteIDChanging(int value);
    partial void OnRouteIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnGradeIDChanging(int value);
    partial void OnGradeIDChanged();
    #endregion
		
		public Route()
		{
			this._Sends = new EntitySet<Send>(new Action<Send>(this.attach_Sends), new Action<Send>(this.detach_Sends));
			this._Grade = default(EntityRef<Grade>);
			this._LocationTable = default(EntityRef<LocationTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._LocationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeID", DbType="Int NOT NULL")]
		public int GradeID
		{
			get
			{
				return this._GradeID;
			}
			set
			{
				if ((this._GradeID != value))
				{
					if (this._Grade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGradeIDChanging(value);
					this.SendPropertyChanging();
					this._GradeID = value;
					this.SendPropertyChanged("GradeID");
					this.OnGradeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Send", Storage="_Sends", ThisKey="RouteID", OtherKey="RouteID")]
		public EntitySet<Send> Sends
		{
			get
			{
				return this._Sends;
			}
			set
			{
				this._Sends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Grade_Route", Storage="_Grade", ThisKey="GradeID", OtherKey="GradeID", IsForeignKey=true)]
		public Grade Grade
		{
			get
			{
				return this._Grade.Entity;
			}
			set
			{
				Grade previousValue = this._Grade.Entity;
				if (((previousValue != value) 
							|| (this._Grade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Grade.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._Grade.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._GradeID = value.GradeID;
					}
					else
					{
						this._GradeID = default(int);
					}
					this.SendPropertyChanged("Grade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationTable_Route", Storage="_LocationTable", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public LocationTable LocationTable
		{
			get
			{
				return this._LocationTable.Entity;
			}
			set
			{
				LocationTable previousValue = this._LocationTable.Entity;
				if (((previousValue != value) 
							|| (this._LocationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocationTable.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._LocationTable.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("LocationTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sends(Send entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Sends(Send entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sends")]
	public partial class Send : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SendID;
		
		private int _ClimberID;
		
		private int _RouteID;
		
		private int _Attempts;
		
		private EntityRef<Climber> _Climber;
		
		private EntityRef<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSendIDChanging(int value);
    partial void OnSendIDChanged();
    partial void OnClimberIDChanging(int value);
    partial void OnClimberIDChanged();
    partial void OnRouteIDChanging(int value);
    partial void OnRouteIDChanged();
    partial void OnAttemptsChanging(int value);
    partial void OnAttemptsChanged();
    #endregion
		
		public Send()
		{
			this._Climber = default(EntityRef<Climber>);
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SendID
		{
			get
			{
				return this._SendID;
			}
			set
			{
				if ((this._SendID != value))
				{
					this.OnSendIDChanging(value);
					this.SendPropertyChanging();
					this._SendID = value;
					this.SendPropertyChanged("SendID");
					this.OnSendIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClimberID", DbType="Int NOT NULL")]
		public int ClimberID
		{
			get
			{
				return this._ClimberID;
			}
			set
			{
				if ((this._ClimberID != value))
				{
					if (this._Climber.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClimberIDChanging(value);
					this.SendPropertyChanging();
					this._ClimberID = value;
					this.SendPropertyChanged("ClimberID");
					this.OnClimberIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", DbType="Int NOT NULL")]
		public int RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attempts", DbType="Int NOT NULL")]
		public int Attempts
		{
			get
			{
				return this._Attempts;
			}
			set
			{
				if ((this._Attempts != value))
				{
					this.OnAttemptsChanging(value);
					this.SendPropertyChanging();
					this._Attempts = value;
					this.SendPropertyChanged("Attempts");
					this.OnAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Climber_Send", Storage="_Climber", ThisKey="ClimberID", OtherKey="ClimberID", IsForeignKey=true)]
		public Climber Climber
		{
			get
			{
				return this._Climber.Entity;
			}
			set
			{
				Climber previousValue = this._Climber.Entity;
				if (((previousValue != value) 
							|| (this._Climber.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Climber.Entity = null;
						previousValue.Sends.Remove(this);
					}
					this._Climber.Entity = value;
					if ((value != null))
					{
						value.Sends.Add(this);
						this._ClimberID = value.ClimberID;
					}
					else
					{
						this._ClimberID = default(int);
					}
					this.SendPropertyChanged("Climber");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Send", Storage="_Route", ThisKey="RouteID", OtherKey="RouteID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Sends.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Sends.Add(this);
						this._RouteID = value.RouteID;
					}
					else
					{
						this._RouteID = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
